В заданиях нельзя использовать коллекции, стрима. Только чистые циклы, только чистые массивы.

Задания разделить по пакетам. Пакет loops содержит задания по циклам, пакет arrays содержит задания по массивам, пакет sorts содержит задания по сортировкам, пакет utils содержит все классы в названии которых есть слово Utils.
Что такое метод можно прочитать тут https://metanit.com/java/tutorial/2.7.php

1. Циклы. Для преобразования строки в число можно использовать http://proglang.su/java/numbers-parseint, если хотите можете добавить проверки на корректность ввода данных. Число положительное, максимум long:
    1.1. Перемножить числа от 1 до числа (включительно) введенного через аргумент к исполняемой программе. Есть нюанс с переполнением, можно добавить проверки и сообщения пользователю.
        Пример: Ввели 5, должно получиться в консоли: 1 * 2 * 3 * 4 * 5 = ответ
    	1.1.1. Используя только цикл
    	1.1.2.* Используя рекурсию
    1.2. Все цифры из числа введенного через аргумент к исполняемой программе перемножить между собой и вывести ход вычислений в консоль. Пользователь обязан ввести целое число. Если ввели не целое то выдать сообщение о том что пользователь ввёл некорректные данные.
		1.2.1 Пример: Ввели 181232375, должно получиться в консоли: 1 * 8 * 1 * 2 * 3 * 2 * 3 * 7 * 5 = 10 080
		1.2.2 Пример: Ввели 99.2, должно получиться в консоли: Введено не целое число
		1.2.3 Пример: Ввели Привет, должно получиться в консоли: Введено не число
    1.3. Возведение в степень. Через консоль пользователь вводит два числа. Первое число это число которое мы будем возводить, Второе число это степень в которую возводят первое число. Степень - только положительная и целая. Возводимое число - может быть отрицательным и оно будет дробным. Math использовать нельзя.
		1.3.1 Пример: Ввели 18 и 5, должно получиться в консоли: 18.0 ^ 5 = 1 889 568.0
		1.3.2 Пример: Ввели 7.5 и 2, должно получиться в консоли: 7.5 ^ 2 = 56.25
    1.4.* Умножать число long a = 1; пока не произойдёт переполнение. В конце в консоль вывести сообщение со значением до переполнения и после переполнения. Умножать на:
    	1.4.1. 3
    	1.4.2. 188
    	1.4.3. -19
    	1.4.4. Да и вообще на любое целочисленное
    1.5. Задачи в презентации. На сайте есть пояснения по каждой из этих задач. Все задачи в одном классе, в отдельных методах.
    	1.5.1. Найти наибольшую цифру натурального числа
    	1.5.2. Вероятность четных случайных чисел
    	1.5.3. Посчитать четные и нечетные цифры числа
    	1.5.4. Ряд Фибоначчи
    	1.5.5. Вывести ряд чисел в диапазоне с шагом
    	1.5.6. Переворот числа
    1.6. Вывести таблицу умножения в консоль. В консоли должно получиться также как и на картинке (динозаврика рисовать не надо): https://www.dropbox.com/s/ibakfuppvy2w32g/multiplication_table.jpeg?dl=0
2. Массивы:
	2.1. Создать класс ArraysUtils. В этом классе не должно быть main метода. В этом классе написать следующие методы:
		2.1.1. Написать метод public static int[] arrayFromConsole(). Данный метод размер массива и каждый его элемент запрашивает у пользователя через консоль.
			2.1.1.1. Пример в отдельном классе с main. int[] container = arrayFromConsole(). Результат: В методе arrayFromConsole будет запрошена информация у пользователя, пользователь вводит размер (3) и его элементы по порядку {4, 17, 32}. Соответсвенно будет создан массив размером 3 с элементами {4, 17, 32} и сохранён в переменную container.
		2.1.2. Написать метод public static int[] arrayRandom(int size, int maxValueExclusion). Данный метод принимает два аргумента. Первый (size) указывает размер массива который мы хотим получить. Второй (maxValueExclusion) указывает до какого числа генерировать рандомные числа.
			2.1.2.1. Пример в отдельном классе с main. int[] container = arrayRandom(5, 100). Результат: В методе arrayRandom будет создан массив размером 5 с числами от 0 до 99 (использовать класс Random) и сохранён в переменную container.
	2.2 Создать класс ArraysIteration. В этом клссе написать перебор массива при помощи do....while, while, for, foreach. Вызывая ранее созданный метод arrayFromConsole (ArraysUtils.arrayFromConsole()) получить массив. Все задачи в одном классе, в отдельных методах. Должно получиться 3 метода:
		2.2.1. Вывести все элементы в консоль.
		2.2.2. Вывести каждый второй элемент массива в консоль.
		2.2.3. Вывести все элементы массива в консоль в обратном порядке.
	2.3* Выполнить задание 2.2 иным способом. Создать интерфейс IArraysOperation с методами из задания, каждый метод должен принимать массив с которым он будет работать. Написать 4 отдельных класса и реализовать данный интерфейс:
		2.3.1. DoWhileOperation - во всех методах можно использовать только do....while
		2.3.2. WhileOperation - во всех методах можно использовать только while
		2.3.3. ForOperation - во всех методах можно использовать только for
		2.3.4. ForEachOperation - во всех методах можно использовать только foreach
	2.4 Задачи в презентации. На сайте есть пояснения по каждой из этих задач. Все задачи в одном классе, в отдельных методах. Для получения массивов вызывать ранее созданный метод arrayRandom (ArraysUtils.arrayRandom(50, 100))
		2.4.1. Сумма четных положительных элементов массива
		2.4.2. Максимальный из элементов массива с четными индексами
		2.4.3. Элементы массива, которые меньше среднего арифметического
		2.4.4. Найти два наименьших (минимальных) элемента массива
		2.4.5. Сжать массив, удалив элементы, принадлежащие интервалу
		2.4.6. Сумма цифр массива
3. Нарисовать блок схему алгоритма работы пузырьковой сортировки. Результат должен быть в гите. Сохранить следующие форматы файлов: (.drawio || .vsdx) && (.pdf || .svg)
	3.1. Что такое алгоритм https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC
	3.2. Прочитать про блок-схемы https://ru.wikipedia.org/wiki/%D0%91%D0%BB%D0%BE%D0%BA-%D1%81%D1%85%D0%B5%D0%BC%D0%B0
4.* Выполнить сортировку массива с числами:
	4.1. Создать класс SortsUtils. В этом классе не должно быть main метода. В этом классе написать следующие методы:
		4.1.1. Написать метод public static void bubble(int[] arr). Данный метод будет сортировать переданный ему массив при помощи алгоритма пузырьковая сортировка. Описание алгоритма: https://prog-cpp.ru/sort-bubble/
		4.1.2. Написать метод public static void shake(int[] arr). Данный метод будет сортировать переданный ему массив при помощи алгоритма шейкерная сортировка. Описание алгоритма: https://prog-cpp.ru/sort-shaker/
	4.2. Создать класс SortsMain. Все проверки пишутся в main.
		4.2.1. После каждого теста в консоль вы должны распечатать сообщение формата "[Какой массив был до сортировки] -> [Каким стал массив после сортировки]". Для преобразования массива в текст можно использовать класс Arrays.
		4.2.2. Для тестов используем предварительно созданные массивы:
			4.2.2.1. new int[]{1,2,3,4,5,6}
			4.2.2.2. new int[]{1,1,1,1}
			4.2.2.3. new int[]{9,1,5,99,9,9}
			4.2.2.4. new int[]{}
			4.2.2.5. new int[]{6,5,4,3,2,1}
		4.2.2 После предварительных тестов пишем тест с рандомным заполнением массива. Вызывая ранее созданный метод arrayRandom (ArraysUtils.arrayRandom(50, 100)) получить массив. Отсортировать.
		4.2.3 После теста с рандомно заполненным массивом пишем тест с массивом полученным через консоль. Вызывая ранее созданный метод arrayFromConsole (ArraysUtils.arrayFromConsole()) получить массив. Отсортировать.

Далее задания выполнять только после прохождения темы "Тестирование"

5. Переделать задание 1, убрав оттуда точки входа, добавить класс для тестов протестировать примерами из задания и своими примерами обязательно.
6. Выполнить задание 2.3, добавить класс для тестов протестировать своими примерами обязательно.
7. Для заданий 2.4 написать тесты и протестировать различными своими примерами обязательно.
8. Протестировать класс SortsUtils из задания 4, добавить класс для тестов протестировать примерами из задания и своими примерами обязательно.