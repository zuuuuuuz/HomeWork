package Home_Work_1;

public class Main2 {
    public static void main(String[] args) {
        int a, b, c;
        c = 5 + 2 / 8;
        System.out.println("Результат 1 выражения (5 + 2 / 8) = " + c);
        /* Результат равен 5, т.к. Сначала выполняется операция деления, потом +.Получаем в ответе
         целое число 5, т.к int а - целое число => дробная часть просто отбрасывается.
         */
        c = (5 + 2) / 8;
        System.out.println("Результат 2 выражения ((5 + 2) / 8) = " + c);
        /* Результат равен 0, т.к. Сначала выполняется сложение в скобках. Получается 7, потом
        оператор /. Получаем в ответе 0,т.к int а - целое число => дробная часть просто отбрасывается.*/
        a = 2;
        c = (5 + a++) / 8;
        System.out.println("Результат 3 выражения ((5 + 2++) / 8) = " + c);
         /* Результат равен 0, т.к. сначала в скобках (5+a++), получаем (7),потом а увеличивается на 1 (3).
         Получаем выражение 7/8, в переменной а находится значение 3. Получаем в ответе 0
         т.к. int а - целое число => дробная часть просто отбрасывается */
        a = 2;
        b = 8;
        c = (5 + a++) / --b;
        System.out.println("Результат 4 выражения ((5 + 2++) / --8) = " + c);
         /*Результат равен 1, т.к. 1 выполняются операторы в скобках (5+a++), получаем (7),потом
         а увеличивается на 1 (3). Потом выполняется преунарный оператор --8 и получаем 7 в b. Получаем выражение 7/7.
         в ответе 1.
         */
        a = 2;
        b = 8;
        c = (5 * 2 >> a++) / --b;
        System.out.println("Результат 5 выражения ((5 * 2 >> 2++) / --8) = " + c);
         /*Результат равен 0, т.к. 1 выполняются операторы в скобках (5 * 2 >> a++), берем а(2),
         получаем (5 * 2 >> 2), потом а увеличивается на 1 (3). >> 2 - побитовый сдвиг вправо на 2 позиции.
         2 в двоичной системе это 0010 после сдвига -> 0000, что является числом 0, получаем выражение 0/--b.
         Следующим действием выполняется преунарный оператор --8 и получаем 7 в b. В итоге выражение 0/7.
         в ответе 0. */
        a = 2;
        b = 8;
        c = (5 + 7 > 20 ? 68 : 22 * 2 >> a++) / --b;
        System.out.println("Результат 6 выражения ((5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8) = " + c);
         /*Результат равен 1, тк. первыми выполняются операторы в скобках (5 + 7 > 20 ? 68 : 22 * 2 >> a++),
         берем а(2), получаем (5 + 7 > 20 ? 68 : 22 * 2 >> 2), потом --> значение а увеличивается на 1.
         --> выполняется умножение 22 * 2, получаем 44 >> 2. >> 2 - побитовый сдвиг вправо на 2 позиции.
         44 в двоичной системе 00101100 после сдвига 00001011 (является числом 11)--> получаем выражение
               (5 + 7 > 20 ? 68 : 11) / --b.
         потом выполняется +, получаем (12 > 20 ? 68 : 11),
         потом сравнение, получаем (false ? 68 : 11) и должно возвратиться выражение 11. (т.к.12<20)
         получаем выражение 11 / --b. Следующим действием выполняется --8 и получаем 7 в b.
         выражение 11/7. Получаем в ответе 1. т.к. int а - целое число => дробная часть просто отбрасывается.*/
        a = 2;
        b = 8;
//      c = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> a++) / --b; не может быть скопилирован
//      System.out.println("Результат 7 выражения ((5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8) = " + c);
        /*здесь тернарный оператор выбрал бы false, но это не изменть факта возновкния ошибки компиляции.
         т.к. тернарный оператор возвращает выражение до ":", если условие  до ?
         true и возвращает выражение после ":", если условие  до ? false. В выражении до ":", в результате
         мы получаем true тип boolean, на выходе из false тип int. А потом у нас еще есть деление и
         Компилятор видит, что возможна арифметическая операция с boolean */
        boolean d;
        d = 6 - 2 > 3 && 12 * 12 <= 119;
        System.out.println("8. Результат 8 выражения (6 - 2 > 3 && 12 * 12 <= 119) равен: " + d);
        /*Результат false, т.к. сначала выполнятся все арифметические действия. Получаем выражение(4 > 3 && 144 <= 119)
        потмо операции сравнения и выполняем логический оператор И (умножение). Получаем true && false, и в результате
         Получаем в ответе false.
         */
        boolean f;
        f = true && false;
        System.out.println("9. Результат 9 выражения (true && false) равен: " + f);
        // Выполняем логический оператор И (умножение). В результате дает false. Получаем в ответе false.
    }
}